import {
  collection,
  doc,
  getDoc,
  getDocs,
  limit,
  query,
  where,
} from "firebase/firestore";
import { useEffect, useState } from "react";
import { firebasefb } from "../../firebaseconfig";
import ProductCard from "../../components/ProductCard";
import { useRouter } from "next/router";
import HomeLayout from "../../layouts/HomeLayout";
import Head from "next/head";
import ReviewCard from "../../components/ReviewCard";
function Brand() {
  const navigate = useRouter();
  const [branddata, setbranddata] = useState(null);
  const [loaded, setloaded] = useState(false);
  const [loading, setloading] = useState(true);
  const [pros, setpros] = useState([]);
  const [reviews, setreviews] = useState([]);
  const { id } = navigate.query;

  useEffect(() => {
    if (loaded) return;
    setloaded(true);

    const getBrand = new Promise((resolve) => {
      getDoc(doc(firebasefb, "brand", id)).then((res) => {
        setbranddata(res.data());
        return resolve();
      });
    });

    const getBrandProduct = new Promise((resolve) => {
      const q = query(
        collection(firebasefb, "product"),
        where("parent", "==", id)
      );
      getDocs(q).then((res) => {
        var a = [],
          prosArr = [];
        res.forEach((pro) => {
          const proData = pro.data();
          a.push(proData);
          if (prosArr.length <= 9) prosArr.push(proData.id);
        });
        setpros(a);

        return resolve(prosArr);
      });
    });
    Promise.all([getBrand, getBrandProduct]).then((res) => {
      let prosArr = res[1];
      console.log(prosArr, "this is prosarray");
      const q = query(
        collection(firebasefb, "review"),
        where("bpsId", "in", prosArr),
        limit(10)
      );
      getDocs(q).then((res) => {
        var a = [];
        res.forEach((rev) => {
          a.push(rev.data());
        });
        setreviews(a);
        setloading(false);
      });
    });
  }, []);

  console.log(reviews, "this is reviews");

  if (loading)
    return (
      <div className="h-screen flex items-center justify-center">
        <i className="fas fa-spinner animate-spin"></i>
      </div>
    );
  else
    return (
      <>
        <Head>
          <title>MyRevue - {branddata.name}</title>
          <meta name="description" content="Generated by create next app" />
          <link
            href="https://fonts.googleapis.com/css2?family=Poppins:wght@400;500;600;700&display=swap"
            rel="stylesheet"
          />
          <script
            src="https://kit.fontawesome.com/5039367dbf.js"
            crossorigin="anonymous"
          ></script>
        </Head>
        <div className="px-4 mt-6 bg-black text-white">
          {/* heading */}
          <div className="flex justify-between items-center">
            <div className=" flex items-center">
              <img
                className=" w-16 mr-6 rounded-full"
                src={branddata.imageUrl}
                alt=""
              />
              <h1 className=" text-5xl">{branddata.name}</h1>
            </div>
            <div className="flex items-center">
              <div className="flex flex-col items-center mr-10">
                <p className=" text-xs">RATING</p>
                <div className="flex items-center">
                  {Array.from(Array(branddata.rating)).map((_, index) => (
                    <i className="fas fa-star m-1 text-purple-500"></i>
                  ))}
                  {Array.from(Array(5 - branddata.rating)).map((_, index) => (
                    <i className="fas fa-star m-1 "></i>
                  ))}
                </div>
              </div>
              <button className="mr-10 bg-purple-700 px-4 py-2 rounded-md">
                subscribe {branddata.subscribes}
              </button>

              <button className="text-xl">
                <i className="fas fa-poll text-xl mr-2"></i> POLL
              </button>
            </div>
          </div>

          {/* banner */}
          <div className=" rounded-md  overflow-hidden bg-red-800 mt-8 mb-4">
            <img className="w-full" src={branddata.coverImage} alt="" />
          </div>

          {/* tag */}
          <ul className="px-4 mb-8 flex">
            {branddata.filter.map((filt, index) => (
              <li
                key={index}
                className=" mr-2 px-3 py-[2px] border-2 border-gray-700 rounded-2xl font-light text-sm"
              >
                {filt}
              </li>
            ))}
          </ul>

          {/* Description */}
          <div className=" mb-10">
            <h1 className=" text-2xl">Description</h1>
            <p className=" font-light">{branddata.description}</p>
          </div>

          {/* Top Products */}
          <div className="mb-10 bg-white bg-opacity-10 p-6 rounded-lg">
            <h1 className="text-4xl font-bold mb-8">Top Products</h1>
            <div className=" flex flex-wrap gap-2 text-center items-start">
              {pros.map((prod, index) => (
                <ProductCard key={index + prod.id} product={prod} />
              ))}
            </div>
          </div>

          {/* All reviews */}
          <div className="mb-10 bg-white bg-opacity-10 px-3 py-4 rounded-lg ">
            <h1 className="text-4xl font-bold mb-8">All Reviews</h1>
            <div className="flex flex-wrap justify-center items-center gap-2">
              {reviews.map((revs, index) => (
                <ReviewCard key={index} review={revs} />
              ))}
            </div>
          </div>
        </div>
      </>
    );
}

Brand.layout = HomeLayout;

export default Brand;
